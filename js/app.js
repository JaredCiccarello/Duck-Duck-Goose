let duckArray = [];
let indexArray = []

let myContainer = document.querySelector('section');

let image1 = document.querySelector('section img:first-child');
let image2 = document.querySelector('section img:nth-child(2)');
let image3 = document.querySelector('section img:nth-child(3)');

let viewResultsBtn = document.querySelector('section ~ div')

let counter = 0;
let maxCounter = 25;

function Duck(name, fileExtension = 'jpg') {
  this.name = name;
  this.src = `img/${name}.${fileExtension}`;
  this.views = 0;
  this.votes = 0;
}
// These are your instances
let bags = new Duck('bags');
let banana = new Duck('banana');
let bathroom = new Duck('bathroom');
let boots = new Duck('boots');
let breakfast = new Duck('breakfast');
let bubblegum = new Duck('bubblegum');
let chair = new Duck('chair');

duckArray.push(bags, banana, bathroom, boots, breakfast, bubblegum, chair);

// console.log(duckArray);

// - get a random number to use with duck array to get a random duck
function selectRandomDuckNumber() {
  // the effect here is that a random number between 0 and 6.9 will be generated by Math.random() * allDuck.length and then Math.floor will round it down so we will get a number a number between 0 and 6
  return Math.floor(Math.random() * duckArray.length);
}
// - update the DOM (change duck photos in the DOM)
//     - increment the number of views on the ducks
function renderDucks() {

  while (indexArray.length < 4) {
    let randomNum = selectRandomDuckNumber
      // We do not want this array running true. If true value is already in array. Which is empty. So put !. This returns the array as false.
    if (!indexArray.includes(randomNum)) {
      // does haystick.includes(needle)
      // This array shows us whether a value is in our array or not
      indexArray.push(randomNum);
    }
  }
  

  // We use shift because it grabs our numbers from ?????
  let imageOne = indexArray.shift(); // 5
  let imageTwo = indexArray.shift(); // 5
  let imageThree = indexArray.shift(); // 5


  image1.src = duckArray[imageOne].src;
  image1.alt = duckArray[imageOne].name;
  duckArray[imageOne].views++;
  image2.src = duckArray[imageTwo].src;
  image2.alt = duckArray[imageTwo].name;
  duckArray[imageTwo].views++;
  image3.src = duckArray[imageThree].src;
  image3.alt = duckArray[imageThree].name;
  duckArray[imageThree].views++;
  // console.log(duckArray);
}

// - handle duck clicks
//     - what duck was click on
//     - increment the number of votes on that duck

function handleDuckClick(event) {
  counter++;
  console.log(event.target.alt);
  let clickedDuck = event.target.alt;
  // find a the duck instance in the duck array whose name property equals the clickedDuck value.
  for (let i = 0; i < duckArray.length; i++) {
    if (clickedDuck === duckArray[i].name) {
      duckArray[i].votes++;
      console.log(duckArray);
    }
  }
  // check to see if the round has ended
  if (counter < maxCounter) {
    // the round can continue, new ducks should render
    renderDucks();
  } else {
    // After voting rounds have been completed, remove the event listeners on the product.
    myContainer.removeEventListener('click', handleDuckClick);
    // make the button clickable
    viewResultsBtn.addEventListener('click', viewResults);
    // stop the game and render the results
  }
}
function viewResults() {
  let ul = document.querySelector('ul');
  for (let i = 0; i < duckArray.length; i++) {
    let li = document.createElement('li');
    li.textContent = `${duckArray[i].name} had ${duckArray[i].views} views and ${duckArray[i].votes} votes.`;
    ul.appendChild(li);
  }
}

// We use render because ???? 
function renderChart() {
  console.log(goatArray);
  
  // When using render, we need a window into the DOM
  const ctx = document.getElementById('myChart');
  
  let duckNames = []
  let duckVotes = []
  let duckViews = []
  
  for (let i = 0; i < duckArray.length; i++)
  console.log(goatArray[i]);
  
  // we use let for name because ????
  let name = duckArray[i].name;
  goatNames.push(name);
  // Using .push takes values received from the user and pushes this information back to the array
  duckVotes.push(duckArray[i].votes);
  duckViews.push(duckArray[i].views);
  
}
renderDucks();

myContainer.addEventListener('click', handleGoatClick);