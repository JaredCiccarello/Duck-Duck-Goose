let duckArray = [];

let myContainer = document.querySelector('section');

let image1 = document.querySelector('section img:first-child');
let image2 = document.querySelector('section img:nth-child(2)');
let image3 = document.querySelector('section img:nth-child(3)');

let viewResultsBtn = document.querySelector('section ~ div')

let counter = 0;
let maxCounter = 25;

function Duck(name, fileExtension = 'jpg') {
  this.name = name;
  this.src = `img/${name}.${fileExtension}`;
  this.views = 0;
  this.votes = 0;
}
// These are your instances
let bags = new Duck('bags');
let banana = new Duck('banana');
let bathroom = new Duck('bathroom');
let boots = new Duck('boots');
let breakfast = new Duck('breakfast');
let bubblegum = new Duck('bubblegum');
let chair = new Duck('chair');

duckArray.push(bags, banana, bathroom, boots, breakfast, bubblegum, chair);

// console.log(duckArray);

// - get a random number to use with duck array to get a random duck
function selectRandomDuckNumber() {
  // the net effect here is that a random number between 0 and 6.9 will be generated by Math.random() * allDuck.length and then Math.floor will round it down so we will get a number a number between 0 and 6
  return Math.floor(Math.random() * duckArray.length);
}

// - update the DOM (change duck photos in the DOM)
//     - increment the number of views on the ducks
function renderDucks() {
  let duck1 = selectRandomDuckNumber(); // 5
  let duck2 = selectRandomDuckNumber(); // 5
  let duck3 = selectRandomDuckNumber(); // 5
  console.log(duck1, duck2);
  // as long as duck1 === duck2 we need a new number for duck2
  while (duck1 === duck2) {
    duck2 = selectRandomDuckNumber(); // 5
    console.log(duck1, duck2);
  }
//   while (duck1 != duck2)
  duck1 
  // seriously consider using an array â€” you can push things to an array
  // remember: how do you find if an array includes something?
  // look it up - Google

  image1.src = duckArray[duck1].src;
  image1.alt = duckArray[duck1].name;
  duckArray[duck1].views++;
  image2.src = duckArray[duck2].src;
  image2.alt = duckArray[duck2].name;
  duckArray[duck2].views++;
  image3.src = duckArray[duck3].src;
  image3.alt = duckArray[duck3].name;
  duckArray[duck3].views++;
  // console.log(duckArray);
}

// - handle duck clicks
//     - what duck was click on
//     - increment the number of votes on that duck

function handleDuckClick(event) {
  counter++;
  console.log(event.target.alt);
  let clickedDuck = event.target.alt;
  // find a the duck instance in the duck array whose name property equals the clickedDuck value.
  for (let i = 0; i < duckArray.length; i++) {
    if (clickedDuck === duckArray[i].name) {
      duckArray[i].votes++;
      console.log(duckArray);
    }
  }
  // check to see if the round has ended
  if ( counter < maxCounter) {
    // the round can continue, new ducks should render
    renderDucks();
  } else {
    // After voting rounds have been completed, remove the event listeners on the product.
    myContainer.removeEventListener('click', handleDuckClick);
    // make the button clickable
    viewResultsBtn.addEventListener('click', viewResults);
    // stop the game and render the results
  }
}
function viewResults() {
  let ul = document.querySelector('ul');
  for (let i = 0; i < duckArray.length; i++) {
    let li = document.createElement('li');
    li.textContent = `${duckArray[i].name} had ${duckArray[i].views} views and ${duckArray[i].votes} votes.`;
    ul.appendChild(li);
  }
}
renderDucks();